#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist

class OpenLoopControl(Node):
    def __init__(self):
        super().__init__('open_loop_control')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        timer_period = 0.5  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.count = 0

    def timer_callback(self):
        msg = Twist()
        if self.count < 4: #Move for 4 seconds total
            msg.linear.x = 0.5  # Move forward
            msg.angular.z = 0.0 # No turning
            self.publisher_.publish(msg)
            self.get_logger().info('Publishing open-loop forward command.')
        else:
            msg.linear.x = 0.0
            msg.angular.z = 0.0
            self.get_logger().info('Stopping ... ')
            self.publisher_.publisher(msg)
            self.destroy_timer(self.timer)
            rclpy.shutdown()
            return

        self.publisher_.publish(msg)
        self.count += 1
          

def main(args=None):
    rclpy.init(args=args)
    node = OpenLoopControl()
    rclpy.spin(node)
    #node.destroy_node()
    #rclpy.shutdown()

if __name__ == '__main__':
    main()

